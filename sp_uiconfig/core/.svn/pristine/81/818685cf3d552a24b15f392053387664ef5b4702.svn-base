package com.ebao.gs.pol.prdt.config.service.impl;

import java.io.ByteArrayOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import com.ebao.gs.pol.constant.UIConfigExcelConstant;
import com.ebao.gs.pol.prdt.config.ConfigFieldInfo;
import com.ebao.gs.pol.prdt.config.ConfigPageInfo;
import com.ebao.gs.pol.prdt.config.ConfigSectionInfo;
import com.ebao.gs.pol.prdt.config.dao.ConfigSqlExecuteDao;
import com.ebao.gs.pol.prdt.config.dao.impl.ConfigSqlExecuteDaoImpl;
import com.ebao.gs.pol.prdt.config.service.UIConfigExportService;

public class UIConfigExportServiceImpl implements UIConfigExportService {
	
	private ConfigSqlExecuteDao configSqlExecuteDao = new ConfigSqlExecuteDaoImpl();
	
	@Override
	public void uiconfigExport(String productName) throws Exception {
		// TODO Auto-generated method stub
		
	}
	
	public String getUIConfigExportFileName(String productName) {
		return productName + "--" + getDateTimeString() + ".xls";
	}
	
	private String getDateTimeString() {
		Date date = com.ebao.pub.framework.AppContext.getCurrentUserLocalTime();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
		
		return dateFormat.format(date);
	}
	
	/**
	 * Get excel file byte array out put stream.
	 * @param configPageInfoList
	 * @return
	 * @throws Exception
	 */
	@Override
	public ByteArrayOutputStream getExcelFileStream(String productName) throws Exception {
		List<ConfigPageInfo> configPageInfoList = configSqlExecuteDao.getPageInfoByProduct(productName);
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		HSSFWorkbook workbook = new HSSFWorkbook();
		
		// 1. Create Page & Section & Field Sheet
		HSSFSheet pageSheet = workbook.createSheet(UIConfigExcelConstant.SHEET_NAME_PAGE);
		HSSFSheet sectionSheet = workbook.createSheet(UIConfigExcelConstant.SHEET_NAME_SECTION);
		HSSFSheet fieldSheet = workbook.createSheet(UIConfigExcelConstant.SHEET_NAME_FIELD);
		
		pageSheet.setDefaultColumnWidth(20);
		//pageSheet.setDefaultRowHeightInPoints(20);
		sectionSheet.setDefaultColumnWidth(20);
		//sectionSheet.setDefaultRowHeightInPoints(20);
		fieldSheet.setDefaultColumnWidth(20);
		//fieldSheet.setDefaultRowHeightInPoints(20);
	    
	    // 2. Create Page & Section & Field Header
	    this.createPageRowHeader(workbook, pageSheet);
	    this.createSectionRowHeader(workbook, sectionSheet);
	    this.createFieldRowBigHeader(workbook, fieldSheet);
	    this.createFieldRowHeader(workbook, fieldSheet);
	    
	    int sectionIndex = 1;
	    int fieldIndex = 2;
		for(int pageIndex = 0; pageIndex < configPageInfoList.size(); pageIndex ++) {
			// 3. Create page information row content
			ConfigPageInfo configPageInfo = configPageInfoList.get(pageIndex);
			this.createPageRowContent(pageSheet, configPageInfo, pageIndex + 1);
			
			for(int sIndex = 0; sIndex < configPageInfo.getSectionList().size(); sIndex ++){
				// 4. Create section information row content
				ConfigSectionInfo configSectionInfo = configPageInfo.getSectionList().get(sIndex);
				this.createSectionRowContent(sectionSheet, configSectionInfo, sectionIndex);
				sectionIndex ++;
				
				for(int fIndex = 0; fIndex < configSectionInfo.getFieldList().size(); fIndex++){
					// 6. Create field information row content
					ConfigFieldInfo configFieldInfo = configSectionInfo.getFieldList().get(fIndex);
					this.createFieldRowContent(fieldSheet, configFieldInfo, fieldIndex);
					fieldIndex ++;
				}
				
				for(int ssIndex = 0; ssIndex<configSectionInfo.getSubSectionList().size(); ssIndex++){
					// 5. Create sub section information row content
					ConfigSectionInfo configSubSectionInfo = configSectionInfo.getSubSectionList().get(ssIndex);
					this.createSectionRowContent(sectionSheet, configSubSectionInfo, sectionIndex);
					sectionIndex ++;
					
					for(int fIndex = 0; fIndex < configSubSectionInfo.getFieldList().size(); fIndex++){
						// 6. Create field information row content
						ConfigFieldInfo configFieldInfo = configSubSectionInfo.getFieldList().get(fIndex);
						this.createFieldRowContent(fieldSheet, configFieldInfo, fieldIndex);
						fieldIndex ++;
					}
				}
			}
			
			/*if(pageIndex != (configPageInfoList.size() - 1)){
				this.createSectionRowSeparator(workbook, sectionSheet, sectionIndex);
				sectionIndex ++;
			}*/
		}
		
		workbook.write(bos);
		return bos;
	}
	
	private HSSFCellStyle getHeaderCellStyle(HSSFWorkbook workbook){
		// Set HSSF Font
		HSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short)10);
		font.setFontName("Arial");
		font.setItalic(false);
		font.setColor(HSSFColor.BLACK.index);
		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		
		// Set HSSF Cell Style
		HSSFCellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
		cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		cellStyle.setFont(font);
		
		// Set Cell Style Border
		cellStyle.setBorderTop(CellStyle.BORDER_THIN);
		cellStyle.setBorderBottom(CellStyle.BORDER_THIN);
		cellStyle.setBorderLeft(CellStyle.BORDER_THIN);
		cellStyle.setBorderRight(CellStyle.BORDER_THIN);
		
		return cellStyle;
	}
	
	/**
	 * Create page row header.
	 * @param pageSheet
	 */
	private void createPageRowHeader(HSSFWorkbook workbook, HSSFSheet pageSheet){
		HSSFRow pageRow = pageSheet.createRow(0);
		pageRow.setHeightInPoints((short)30);
		
		for(int i=0; i<UIConfigExcelConstant.PAGE_HEADER_ARRAY.length; i++){
			HSSFCell cell = pageRow.createCell(i);
			cell.setCellStyle(this.getHeaderCellStyle(workbook));
			cell.setCellValue(UIConfigExcelConstant.PAGE_HEADER_ARRAY[i]);
		}
	}
	
	/**
	 * Create section row header.
	 * @param sectionSheet
	 */
	private void createSectionRowHeader(HSSFWorkbook workbook, HSSFSheet sectionSheet) {
		HSSFRow sectionRow = sectionSheet.createRow(0);
		sectionRow.setHeightInPoints((short)30);
		
		for(int i=0; i<UIConfigExcelConstant.SECTION_HEADER_ARRAY.length; i++){
			HSSFCell cell = sectionRow.createCell(i);
			cell.setCellStyle(this.getHeaderCellStyle(workbook));
			cell.setCellValue(UIConfigExcelConstant.SECTION_HEADER_ARRAY[i]);
		}
	}
	
	private void createFieldRowBigHeader(HSSFWorkbook workbook, HSSFSheet fieldSheet){
		HSSFRow fieldRow = fieldSheet.createRow(0);
		fieldRow.setHeightInPoints((short)20);
		
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 2));
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 3, 22));
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 23, 28));
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 29, 36));
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 37, 41));
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 42, 46));
		fieldSheet.addMergedRegion(new CellRangeAddress(0, 0, 47, 50));
		
		for(int i=0; i<UIConfigExcelConstant.FIELD_BIG_DEADER_ARRAY.length; i++){
			HSSFCell cell = fieldRow.createCell(Integer.parseInt(UIConfigExcelConstant.FIELD_BIG_DEADER_ARRAY[i][0]));
			cell.setCellStyle(this.getHeaderCellStyle(workbook));
			cell.setCellValue(UIConfigExcelConstant.FIELD_BIG_DEADER_ARRAY[i][1]);
		}
	}
	
	private void createFieldRowHeader(HSSFWorkbook workbook, HSSFSheet fieldSheet) {
		HSSFRow fieldRow = fieldSheet.createRow(1);
		fieldRow.setHeightInPoints((short)30);
		
		for(int i=0; i<UIConfigExcelConstant.FIELD_HEADER_ARRAY.length; i++){
			HSSFCell cell = fieldRow.createCell(i);
			cell.setCellStyle(this.getHeaderCellStyle(workbook));
			cell.setCellValue(UIConfigExcelConstant.FIELD_HEADER_ARRAY[i]);
		}
	}
	
	private void createPageRowContent(HSSFSheet pageSheet, ConfigPageInfo configPageInfo, Integer index){
		HSSFRow pageRow = pageSheet.createRow(index);
		
		pageRow.createCell(0).setCellValue(configPageInfo.getPageSequence());
		pageRow.createCell(1).setCellValue(configPageInfo.getProductName());
		pageRow.createCell(2).setCellValue(configPageInfo.getPageTitle());// page Name
		pageRow.createCell(3).setCellValue(configPageInfo.getPageTitle());
		//pageRow.createCell(4).setCellValue(configPageInfo.getPageType());
		//pageRow.createCell(5).setCellValue(configPageInfo.getPageTemplate());
		pageRow.createCell(4).setCellValue(configPageInfo.getPageDescription());
	}
	
	private void createSectionRowContent(HSSFSheet sectionSheet, ConfigSectionInfo configSectionInfo, Integer index) {
		HSSFRow sectionRow = sectionSheet.createRow(index);
		
		if(configSectionInfo.getPage() != null){
			//sectionRow.createCell(0).setCellValue(configSectionInfo.getPage().getPageId());
			sectionRow.createCell(0).setCellValue(configSectionInfo.getPage().getPageTitle());//Page Name
		} else {
			if(configSectionInfo.getParentSection() != null){
				//sectionRow.createCell(0).setCellValue(configSectionInfo.getParentSection().getPage().getPageId());
				sectionRow.createCell(0).setCellValue(configSectionInfo.getParentSection().getPage().getPageTitle());// Page Name
			}
		}
		
		sectionRow.createCell(1).setCellValue(configSectionInfo.getSectionName());
		sectionRow.createCell(2).setCellValue(configSectionInfo.getSubSectionName());
		sectionRow.createCell(3).setCellValue(configSectionInfo.getSectionSequence());
		sectionRow.createCell(4).setCellValue(configSectionInfo.getSectionTitle());
		//sectionRow.createCell(5).setCellValue(configSectionInfo.getSectionCode());
		//sectionRow.createCell(5).setCellValue(configSectionInfo.getSectionType());
		sectionRow.createCell(5).setCellValue(configSectionInfo.getType());
		//sectionRow.createCell(6).setCellValue(configSectionInfo.getSectionTemplate());
		sectionRow.createCell(6).setCellValue(configSectionInfo.getDescription());
		//sectionRow.createCell(10).setCellValue(configSectionInfo.getDataTableProvider());
	}
	
	/**
	 * Create field row content.
	 * @param fieldSheet
	 * @param configFieldInfo
	 * @param index
	 */
	private void createFieldRowContent(HSSFSheet fieldSheet, ConfigFieldInfo configFieldInfo, Integer index) {
		HSSFRow fieldRow = fieldSheet.createRow(index);
		
		// page & section & sub section attribute
		if(configFieldInfo.getSection().getPage() != null){
			fieldRow.createCell(0).setCellValue(configFieldInfo.getSection().getPage().getPageTitle());
		} else {
			if(configFieldInfo.getSection().getParentSection() != null){
				fieldRow.createCell(0).setCellValue(configFieldInfo.getSection().getParentSection().getPage().getPageTitle());
			}
		}
		fieldRow.createCell(1).setCellValue(configFieldInfo.getSection().getSectionName());
		fieldRow.createCell(2).setCellValue(configFieldInfo.getSection().getSubSectionName());
				
		// field attribute
		fieldRow.createCell(3).setCellValue(configFieldInfo.getSequence());
		//fieldRow.createCell(4).setCellValue(configFieldInfo.getFieldId());
		fieldRow.createCell(4).setCellValue(configFieldInfo.getFieldName());
		//fieldRow.createCell(5).setCellValue(configFieldInfo.getFieldCode());
		fieldRow.createCell(5).setCellValue(configFieldInfo.getDisplayLabel());
		fieldRow.createCell(6).setCellValue(configFieldInfo.getDisplayType());
		//fieldRow.createCell(8).setCellValue(configFieldInfo.isDynamic());
				
		fieldRow.createCell(7).setCellValue(configFieldInfo.getValueBinding());
		fieldRow.createCell(8).setCellValue(configFieldInfo.getDefaultValue());
		fieldRow.createCell(9).setCellValue(configFieldInfo.getColspan());
		fieldRow.createCell(10).setCellValue(configFieldInfo.getFormat());
		fieldRow.createCell(11).setCellValue(configFieldInfo.getIo());
		fieldRow.createCell(12).setCellValue(configFieldInfo.getHelpText());
		fieldRow.createCell(13).setCellValue(configFieldInfo.getEmptyText());
		fieldRow.createCell(14).setCellValue(configFieldInfo.getInputWidth());
		fieldRow.createCell(15).setCellValue(configFieldInfo.getErrorMsg());
		fieldRow.createCell(16).setCellValue(configFieldInfo.getAllowDecimal());
		fieldRow.createCell(17).setCellValue(configFieldInfo.getDecimalPrecision());
		fieldRow.createCell(18).setCellValue(configFieldInfo.getValidationGroup());
		fieldRow.createCell(19).setCellValue(configFieldInfo.getMinValue());
		fieldRow.createCell(20).setCellValue(configFieldInfo.getMaxValue());
		fieldRow.createCell(21).setCellValue(configFieldInfo.getMinLength());
		fieldRow.createCell(22).setCellValue(configFieldInfo.getMaxLength());
		
		// Readonly & Required & Display
		fieldRow.createCell(23).setCellValue(configFieldInfo.isReadOnly());
		fieldRow.createCell(24).setCellValue(configFieldInfo.isRequired());
		fieldRow.createCell(25).setCellValue(configFieldInfo.isVisible());
		fieldRow.createCell(26).setCellValue(configFieldInfo.getReadOnlyEx());
		fieldRow.createCell(27).setCellValue(configFieldInfo.getRequieredEx());
		fieldRow.createCell(28).setCellValue(configFieldInfo.getVisibleEx());
				
		// Quote -- Readonly & Required & Display
		/*fieldRow.createCell(32).setCellValue(configFieldInfo.isQuoteReadonly());
		fieldRow.createCell(33).setCellValue(configFieldInfo.isQuoteRequired());
		fieldRow.createCell(34).setCellValue(configFieldInfo.isQuoteDisplay());
		fieldRow.createCell(35).setCellValue(configFieldInfo.getQuoteReadonlyCondition());
		fieldRow.createCell(36).setCellValue(configFieldInfo.getQuoteRequiredCondition());
		fieldRow.createCell(37).setCellValue(configFieldInfo.getQuoteDisplayCondition());*/
				
		// Policy -- Readonly & Required & Display
		/*fieldRow.createCell(38).setCellValue(configFieldInfo.isPolicyReadonly());
		fieldRow.createCell(39).setCellValue(configFieldInfo.isPolicyRequired());
		fieldRow.createCell(40).setCellValue(configFieldInfo.isPolicyDisplay());
		fieldRow.createCell(41).setCellValue(configFieldInfo.getPolicyReadonlyCondition());
		fieldRow.createCell(42).setCellValue(configFieldInfo.getPolicyRequiredCondition());
		fieldRow.createCell(43).setCellValue(configFieldInfo.getPolicyDisplayCondition());*/
				
		// Endorsement -- Readonly & Required & Display
		/*fieldRow.createCell(44).setCellValue(configFieldInfo.isEndoReadonly());
		fieldRow.createCell(45).setCellValue(configFieldInfo.isEndoRequired());
		fieldRow.createCell(46).setCellValue(configFieldInfo.isEndoDisplay());
		fieldRow.createCell(47).setCellValue(configFieldInfo.getEndoReadonlyCondition());
		fieldRow.createCell(48).setCellValue(configFieldInfo.getEndoRequiredCondition());
		fieldRow.createCell(49).setCellValue(configFieldInfo.getEndoDisplayCondition());*/
				
		// Renewal -- Readonly & Required & Display
		/*fieldRow.createCell(50).setCellValue(configFieldInfo.isRenewReadonly());
		fieldRow.createCell(51).setCellValue(configFieldInfo.isRenewRequired());
		fieldRow.createCell(52).setCellValue(configFieldInfo.isRenewDisplay());
		fieldRow.createCell(53).setCellValue(configFieldInfo.getRenewReadonlyCondition());
		fieldRow.createCell(54).setCellValue(configFieldInfo.getRenewRequiredCondition());
		fieldRow.createCell(55).setCellValue(configFieldInfo.getRenewDisplayCondition());*/
				
		// Code Table component attribute
		fieldRow.createCell(29).setCellValue(configFieldInfo.getTableName());
		fieldRow.createCell(30).setCellValue(configFieldInfo.getCodeTabelDisplayType());
		fieldRow.createCell(31).setCellValue(configFieldInfo.getWhereClause());
		fieldRow.createCell(32).setCellValue(configFieldInfo.getOrderBy());
		fieldRow.createCell(33).setCellValue(configFieldInfo.getChildItem());
		fieldRow.createCell(34).setCellValue(configFieldInfo.getParentItem());
		fieldRow.createCell(35).setCellValue(configFieldInfo.getUnitedKey());
		fieldRow.createCell(36).setCellValue(configFieldInfo.isNoSelectionLoad());
				
		// Text Area component attribute
		fieldRow.createCell(37).setCellValue(configFieldInfo.getTextAreaRows());
		fieldRow.createCell(38).setCellValue(configFieldInfo.getTextAreaCols());
				
		// Data Table attribute
		fieldRow.createCell(39).setCellValue(configFieldInfo.getColumnWidth());
		fieldRow.createCell(40).setCellValue(configFieldInfo.getTableTitleAlign());
		fieldRow.createCell(41).setCellValue(configFieldInfo.getTableColumnAlign());
				
		// UIC2 Component JSF event attribute
		fieldRow.createCell(42).setCellValue(configFieldInfo.isAjaxEnabled());
		fieldRow.createCell(43).setCellValue(configFieldInfo.getAction());
		fieldRow.createCell(44).setCellValue(configFieldInfo.getActionListener());
		fieldRow.createCell(45).setCellValue(configFieldInfo.getOnChangeListener());
		fieldRow.createCell(46).setCellValue(configFieldInfo.getUpdateFieldIds());
		
		// UIC2 Component JavaScript event attribute
		fieldRow.createCell(47).setCellValue(configFieldInfo.getOnBlur());
		fieldRow.createCell(48).setCellValue(configFieldInfo.getOnChange());
		fieldRow.createCell(49).setCellValue(configFieldInfo.getOnButtonClick());
	}
	
	private void createSectionRowSeparator(HSSFWorkbook workbook, HSSFSheet sectionSheet, Integer index){
		HSSFCellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
		
		HSSFRow sectionRow = sectionSheet.createRow(index);
		//SECTION_COLUMN_COUNT
		for(int i=0; i<UIConfigExcelConstant.SECTION_HEADER_ARRAY.length; i++){
			HSSFCell cell = sectionRow.createCell(i);
			cell.setCellStyle(cellStyle);
		}
	}

}

